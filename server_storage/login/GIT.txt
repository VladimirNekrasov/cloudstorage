репозиторий - это то место, где хранится проект или програмный кода/
Репозитории бывают локальные (local) и удаленные (remote)

git config --global user.name geekbrains - указание имени
$ git config --global user.email info.geekbrains.ru указание email для связи
$ git config --global color.ui auto - подсвечивание цветами
$ git config --list - просмотр внедренных выше настроек
ls - показать список файлов
ls -a - показ всех файлов, в том числе и скрытых

cd Downloads/ - перейти в директорию (cd -change directory)
cd ~ - переход в домашнюю директорию (в папку пользователя).
cd .. - выход в папку на уровень выше текущей
cd ../.. - выход в папку на 2 уровня выше текущей 
mkdir TestDir - создание новой директории (TestDir - это имя)
touch test.txt - создание файла
cp test.txt test_copy.txt - копируем файл в другой файл (cp - сокращенно copy)
mv test.txt text_original.txt - переименовываем файл (mv - move (переместить)
echo "Hello" - выводит текст в консоль
echo "Hello" > test_original.txt - выводим текст в конкретный файл
cat test_original.txt - просмотр содержимого файла
rm test_original.txtrm test_original.txt - удаление файла (восстановлению не подлежит)
rm -R TestDir/ - удаление директории

git init - создает пустой репозиторий в текущем местоположении путем добавления своей собственной системной папки.
git status - состояние репозитория
git remote add origin https://github.com/VladimirNekrasov/repo-github.git - синхронизируем наш репозиторий в Git Bash с удаленным репозиторием
git remote -v - список подключенных remote (удаленных) соединений.

коммиты
git add readme.md - добавление файла в индекс изменений.
git rm --cached <file> - команда для удаление файла из отслеживаемого индекса изменений.
git commit - создание коммита (запускает редактор V), в котором нужно написать сообщение истории изменений.
Жмем i для написания сообщения, далее пишем его и жмем esc для завершения редактирования.
Далее пишем в нижней строчке :wq (w - для записи изменений, q- для выхода) 
git status - текущий статус 
git add <file> - добавить файл к будущему коммиту
git commit -m 'commit message' - записать коммит с собщением
git restore <file> - отмена изменений и преобразование их к состоянию предыдущего коммита.
git commit -a - если уверен, что все правильно, можно создать коммит этой командой. (git commit -a = git add + git commit)
git commit -am ''-создание коммита с сообщением.
.gitkeep - сохраняет пустые директории в общем репозитории. например, touch images/.gitkeep
.gitignore - игнорирует некоторые файлы, чтобы они не попали в общий индекс репозитория. 
echo "config" > .gitignore - записываем название файла в гитигнор, который мы будет игнорировать.

git log - доступ к истории репозитория
git log --oneline - вывод истории в более компактном виде
git reset ccf7fca - сброси коммита на выбранный (git reset + хэш коммита, который можно увидеть в истории)
git reflog - подробные сведение о том, что происходит в репозитории. (включая удаления)
git revert - создает новый коммит, который отменяет действия в предыдущем и не сбрасывает состояние репозитория
при это открывается окно коммита. Выходим :wq
git restore - сбор состояния файла на указанное

git branch - команда для просмотра какие ветки доступны в нашем текущем репозитории
git branch dev - создание новой ветки (dev - её имя)
git checkout dev - переключиться на ветку (dev - её имя)
git branch dev-master master - создали новую ветку с именем dev-master с точкой старта master
git checkout -b dev-test - выполнит переключение на ветку dev-test и если ее нет, то создаст ее автоматом
ssh-keygen - создаем ключ для репозитория
git push - Загружает все изменения обратно в удаленный репозиторий (удаленный в смысле на github)
git push -u origin dev - загружаем с текущей ветки dev на ветку origin dev
git pull - загружаем данные с удаленного репозитория
git fetch - обновляет текущую синхронизацию по данным об удаленном репозитории